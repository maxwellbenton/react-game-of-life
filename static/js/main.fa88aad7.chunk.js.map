{"version":3,"sources":["components/Cell.js","components/BoardContainer.js","components/ControlsContainer.js","indexDB/index.js","App.js","serviceWorker.js","index.js"],"names":["Cell","handleHover","props","alwaysOn","handleClick","id","nextProps","nextState","cellSize","this","status","onColor","offColor","onClick","className","onMouseEnter","onMouseOut","style","position","top","left","width","height","background","border","React","Component","useStyles","makeStyles","theme","root","padding","spacing","margin","BoardContainer","speed","size","grid","handleCellClick","rebuildGrid","boardRef","controlsRequest","useState","setAlwaysOn","classes","timerRef","useRef","useEffect","window","addEventListener","removeEventListener","tick","clearTimeout","current","setTimeout","Paper","ref","onMouseDown","onMouseUp","Math","round","clientWidth","map","row","rowIndex","column","columnIndex","key","renderCells","ControlsContainer","save","load","handleSpeedSliderChange","handleSizeSliderChange","handleClear","handleRandom","handleOnColorChange","handleOffColorChange","inputValues","setInputValues","handleInputChange","event","target","value","slice","length","replace","previous","Typography","gutterBottom","Grid","container","alignItems","item","xs","Slider","onChange","aria-labelledby","step","justify","Input","name","ButtonGroup","variant","aria-label","Button","dbPromise","openDB","upgrade","db","createObjectStore","idbKeyval","get","set","val","put","delete","clear","keys","getAllKeys","App","setOffColor","setOnColor","setSpeed","setSize","setGrid","gridRef","a","data","updateData","JSON","stringify","checkForNeighbors","neighbors","filter","n","random","option","console","log","newGrid","floor","clientHeight","previousState","cell","cellIndex","newValue","newColor","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa88aad7.chunk.js","sourcesContent":["import React from 'react'\n\nclass Cell extends React.Component { \n  shouldComponentUpdate(nextProps, nextState) {\n    if(nextProps.cellSize !== this.props.cellSize) return true\n    if(nextProps.status !== this.props.status) return true\n    if(nextProps.onColor !== this.props.onColor) return true\n    if(nextProps.offColor !== this.props.offColor) return true\n    return false\n  }\n\n  handleHover = () => {\n    if(this.props.alwaysOn) {\n      this.props.handleClick(this.props.id, this.props.alwaysOn)\n    }\n  }\n  render() {\n    return (\n      <div \n        id={this.props.id} \n        onClick={() => this.props.handleClick(this.props.id, false)}\n        className=\"cell\"\n        onMouseEnter={this.handleHover}\n        onMouseOut={this.handleHover}\n        style={{\n          position: 'absolute',\n          top: this.props.id[0] * this.props.cellSize,\n          left: this.props.id[1] * this.props.cellSize,\n          width: this.props.cellSize,\n          height: this.props.cellSize,\n          background: this.props.status ? this.props.onColor : this.props.offColor,\n          border: this.props.status ? this.props.onColor : this.props.offColor\n        }}\n      ></div>\n    )\n  }\n}\n\nexport default Cell;","import React, { useState, useRef, useEffect } from 'react';\nimport Cell from './Cell'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(3, 2),\n    margin: \"5%\"\n  }\n}));\n\nconst BoardContainer = ({speed, size, grid, offColor, onColor, handleCellClick, rebuildGrid, controlsRequest, boardRef}) => {\n  const [alwaysOn, setAlwaysOn] = useState(false)\n  const classes = useStyles();\n  const timerRef = useRef(null);\n\n  const handleMouseDown = () => {\n    setAlwaysOn(true)\n  }\n\n  const handleMouseUp = () => {\n    setAlwaysOn(false)\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", rebuildGrid);\n    return () => {\n      window.removeEventListener(\"resize\", rebuildGrid);\n    }\n  }, [])\n\n  const tick = () => {\n    clearTimeout(timerRef.current)\n    rebuildGrid()\n    timerRef.current = setTimeout(tick, 15/(speed+1)*1000)\n  }\n\n  useEffect(() => {\n    tick()\n  }, [speed, size, onColor, offColor])\n\n  const renderCells = () => {\n    let cellSize = Math.round((boardRef.current.clientWidth/(size+5)))*10/10\n    \n    return grid.map((row, rowIndex) => {\n      return row.map((column, columnIndex) => {\n        return <Cell \n          offColor={offColor}\n          onColor={onColor}\n          alwaysOn={alwaysOn}\n          key={[rowIndex,columnIndex]} \n          id={[rowIndex,columnIndex]} \n          handleClick={handleCellClick}\n          status={grid[rowIndex][columnIndex]}\n          cellSize={cellSize}\n        />\n      })\n    })\n  }\n\n  return (\n    <Paper className={classes.root + \" BoardContainer\"} >\n      <div ref={boardRef} onMouseDown={handleMouseDown} onMouseUp={handleMouseUp}className=\"Board\">\n        {grid ? renderCells() : null}\n      </div>\n    </Paper>\n  )\n}\n\nexport default BoardContainer","import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Input from '@material-ui/core/Input';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport AppsIcon from '@material-ui/icons/Apps';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(3, 2),\n    margin: \"5%\"\n  }\n}));\n\nconst ControlsContainer = ({speed, size, save, load, offColor, onColor, handleSpeedSliderChange, handleSizeSliderChange, handleClear, handleRandom, handleOnColorChange, handleOffColorChange}) => {\n  const classes = useStyles();\n  const [inputValues, setInputValues] = useState({\"off\": offColor, 'on':  onColor})\n\n  const handleInputChange = event => {\n    let id = event.target.id\n    let value = event.target.value.slice(1)\n    if(value.length > 3) value = value.slice(0,3)\n    value = value.replace(/[^0-9a-fA-F]/, '')\n    value = '#' + value\n    if(value.length === 4 && id === \"off\") handleOffColorChange(value)\n    if(value.length === 4 && id === \"on\") handleOnColorChange(value)\n    setInputValues(previous => ({...previous, [id]: value}))\n  }\n\n  return (\n    <Paper className={classes.root}>\n      <Typography id=\"input-slider\" gutterBottom>\n        Speed\n      </Typography>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item>\n          <AccessTimeIcon />\n        </Grid>\n        <Grid item xs>\n          <Slider\n            value={typeof speed === 'number' ? speed : 0}\n            onChange={handleSpeedSliderChange}\n            aria-labelledby=\"input-slider\"\n          />\n        </Grid>\n      </Grid>\n      <Typography id=\"input-slider\" gutterBottom>\n        Size\n      </Typography>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item>\n          <AppsIcon />\n        </Grid>\n        <Grid item xs>\n          <Slider\n            value={typeof size === 'number' ? size : 0}\n            onChange={handleSizeSliderChange}\n            aria-labelledby=\"input-slider\"\n            step={5}\n          />\n        </Grid>\n      </Grid>\n      <Grid container spacing={2} justify=\"center\">\n        <Grid item>\n          <div className=\"cellControl\" style={{background: offColor}}></div>\n        </Grid>\n        <Grid item>\n          <div className=\"cellControl\" style={{background: onColor}}></div>\n        </Grid>\n      </Grid>\n      <Grid container spacing={2} justify=\"center\">\n        <Grid item>\n            <Input className=\"cellControlInput\" id=\"off\" name=\"off\" value={inputValues[\"off\"]} onChange={handleInputChange}/>\n        </Grid>\n        <Grid item>\n            <Input className=\"cellControlInput\" id=\"on\" name=\"on\" value={inputValues[\"on\"]} onChange={handleInputChange}/>\n        </Grid>\n      </Grid>\n      <Grid container spacing={2} justify=\"center\">\n        <Grid item>\n          <ButtonGroup variant=\"contained\" size=\"medium\" aria-label=\"small contained button group\">\n            <Button onClick={() => save()}>Save</Button>\n            <Button onClick={() => load()}>Load</Button>\n            <Button onClick={() => handleRandom()}>Random</Button>\n            <Button onClick={() => handleClear()}>Clear</Button>\n          </ButtonGroup>\n        </Grid>\n      </Grid>\n      \n    </Paper>\n  )\n}\n\nexport default ControlsContainer","import { openDB } from 'idb';\n\nexport const dbPromise = openDB('game-of-life-data', 1, {\n  upgrade(db) {\n    db.createObjectStore('game-data');\n  },\n});\n \nexport const idbKeyval = {\n  async get(key) {\n    return (await dbPromise).get('game-data', key);\n  },\n  async set(key, val) {\n    return (await dbPromise).put('game-data', val, key);\n  },\n  async delete(key) {\n    return (await dbPromise).delete('game-data', key);\n  },\n  async clear() {\n    return (await dbPromise).clear('game-data');\n  },\n  async keys() {\n    return (await dbPromise).getAllKeys('game-data');\n  },\n};","import React, {useState, useEffect, useRef } from 'react';\nimport BoardContainer from './components/BoardContainer'\nimport ControlsContainer from './components/ControlsContainer'\nimport  { idbKeyval } from './indexDB/'\nimport './App.css';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(3, 2),\n    margin: \"5%\"\n  }\n}));\n\nfunction App() {\n  //sets colors, speed, size\n  const [offColor, setOffColor] = useState('#003')//'#'+(Math.random()*0xFFFFFF<<0).toString(16).slice(0,3))\n  const [onColor, setOnColor] = useState('#aaa')//'#'+(Math.random()*0xFFFFFF<<0).toString(16).slice(0,3))\n  const [speed, setSpeed] = useState(100);\n  const [size, setSize] = useState(40);\n  const [grid, setGrid] = useState(null)\n  const classes = useStyles();\n\n  //gridRef required for timer calls\n  const gridRef = useRef(grid);\n  const boardRef = useRef(null);\n  gridRef.current = grid;\n\n  const handleOffColorChange = newColor => {\n    setOffColor(newColor)\n  }\n  const handleOnColorChange = newColor => {\n    setOnColor(newColor)\n  }\n\n  useEffect(() => {\n    const updateData = async () => {\n      let data = await idbKeyval.get('game-data')\n      if (data) {\n        setGrid(data)\n      }\n    }\n    updateData()\n  }, [])\n\n  const save = async () => {\n    let data = await idbKeyval.get('game-data')\n    if (JSON.stringify(data) !== JSON.stringify(grid)) {\n      await idbKeyval.set('game-data', grid)\n    }\n  }\n\n  const load = async () => {\n    let data = await idbKeyval.get('game-data')\n    setGrid(data)\n  }\n  \n  const handleClear = () => {\n    rebuildGrid(\"clear\")\n  }\n\n  const handleRandom = () => {\n    rebuildGrid(\"random\")\n  }\n\n  const handleSpeedSliderChange = (event, newValue) => {\n    setSpeed(newValue);\n  };\n  const handleSizeSliderChange = (event, newValue) => {\n    setSize(newValue);\n  };\n\n  const handleCellClick = (id, alwaysOn) => {\n    setGrid(previousState => {\n      return previousState.map((row, rowIndex) => {\n          if(id[0] === rowIndex) {\n            return row.map((cell, cellIndex)  => {\n              if(cellIndex === id[1]) {\n                if (alwaysOn) {\n                  return true\n                } else {\n                  return !cell\n                }\n              } else {\n                return cell\n              }\n            })\n          } else {\n            return row\n          }\n        })\n    })\n  }\n\n  const checkForNeighbors = (row,column) => {\n    if(gridRef.current !== null && gridRef.current[row]) {\n      let neighbors = [\n        gridRef.current[row-1] ? gridRef.current[row-1][column-1] : false,\n        gridRef.current[row-1] ? gridRef.current[row-1][column] : false,\n        gridRef.current[row-1] ? gridRef.current[row-1][column+1] : false,\n        gridRef.current[row][column-1],\n        gridRef.current[row][column+1],\n        gridRef.current[row+1] ? gridRef.current[row+1][column-1] : false,\n        gridRef.current[row+1] ? gridRef.current[row+1][column] : false,\n        gridRef.current[row+1] ? gridRef.current[row+1][column+1] : false,\n      ].filter(n => n)\n      if(gridRef.current[row][column]) {\n        return neighbors.length === 2 || neighbors.length === 3\n      } else {\n        return neighbors.length === 3\n      }\n    } else {\n      return Math.random() > .5\n    }\n  }\n\n  const rebuildGrid = (option = null) => {\n    console.log('build')\n    let newGrid = []\n    for(let row = 0; row < Math.floor(boardRef.current.clientHeight/(boardRef.current.clientWidth/(size+5))); row++) {\n      newGrid[row] = []\n      for(let column = 0; column < Math.floor(boardRef.current.clientWidth/(boardRef.current.clientWidth/(size+5))); column++) {\n        if(option === \"clear\") {\n          newGrid[row][column] = false\n        } else if(option === \"random\") {\n          newGrid[row][column] = Math.random() > .5\n        } else {\n          newGrid[row][column] = checkForNeighbors(row,column)\n        }\n      }\n    }\n    setGrid(newGrid)\n  }\n\n  return (\n    <div className=\"App\">\n      <Paper className={classes.root}>\n        <Typography variant=\"h4\">Life in React</Typography>\n      </Paper>\n      <BoardContainer \n        grid={grid}\n        offColor={offColor}\n        onColor={onColor}\n        speed={speed} \n        size={size}\n        rebuildGrid={rebuildGrid}\n        handleCellClick={handleCellClick}\n        boardRef={boardRef}\n      />\n      <ControlsContainer\n        save={save}\n        load={load}\n        speed={speed} \n        size={size}\n        offColor={offColor}\n        onColor={onColor}\n        handleSpeedSliderChange={handleSpeedSliderChange}\n        handleSizeSliderChange={handleSizeSliderChange}\n        handleClear={handleClear}\n        handleRandom={handleRandom}\n        handleOffColorChange={handleOffColorChange}\n        handleOnColorChange={handleOnColorChange}\n      />\n      <Paper className={classes.root}>\n        <Typography variant=\"body1\">\n          The Game of Life is a cellular automation game designed by John Conway in 1970. The game follows simple rules: each 'cell' can be OFF or ON ('dead' or 'alive'). Whether or not a cell is ON is determined by how many neighboring cells are ON. An OFF cell will turn ON if it has exactly three neighboring cells that are ON. An ON cell will stay on if there are two or three neighboring cells that are ON. Otherwise, the cell turns or stays OFF.\n        </Typography>\n        <br/>\n        <Typography variant=\"body1\">\n          While these rules are simple, it is possible for highly complex patterns to develop, including patterns that can sustain themselves, 'travel' across the board, and even create other self-sustaining patterns. It is theoretically possible to create complete Turing machines using the patterns that can exist in this 2d world.\n        </Typography>\n      </Paper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}